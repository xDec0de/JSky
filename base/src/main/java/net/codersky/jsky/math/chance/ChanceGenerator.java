package net.codersky.jsky.math.chance;

import org.jetbrains.annotations.NotNull;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

/**
 * An {@code interface} used to represent a generator that can
 * generate a list of elements randomly, each element
 * with a predefined chance to be present on the list.
 *
 * @author xDec0de_
 *
 * @param <T> The type of elements to generate
 *
 * @since JSky 1.0.0
 */
public interface ChanceGenerator<T> {

	/**
	 * Adds a new {@code element} to be {@link #generate()
	 * generated} randomly with a specific {@code chance}
	 *
	 * @param element The element to add.
	 * @param chance The chance this element will have to
	 * be present on the {@link List} returned by {@link #generate()}
	 * each time the method is called. This chance is a percentage, so
	 * a value lower or equal to 0 will result in an impossible
	 * chance to generate the {@code element}, while a chance equal
	 * or higher to 100, will result in the {@code element} to always
	 * be generated.
	 *
	 * @return This {@link ChanceGenerator}.
	 *
	 * @since JSky 1.0.0
	 */
	@NotNull
	ChanceGenerator<T> add(@NotNull T element, float chance);

	/**
	 * Generates a {@link List} with {@link #add(Object, float) added}
	 * elements by chance. Keep in mind that this list may be empty if
	 * no element succeeded to be generated by chance.
	 *
	 * @return A {@link List} with {@link #add(Object, float) added}
	 * elements by chance. May be empty if no element was generated by chance.
	 *
	 * @since JSky 1.0.0
	 */
	@NotNull
	List<T> generate();

	/**
	 * Works in a similar way to {@link #generate()} but limits the
	 * generated elements to a {@code max} amount. Implementations should
	 * discard more common elements (Higher chance ones) if the resulting
	 * list exceeds the {@code max} size. An auxiliary method is provided
	 * for this purpose ({@link #limitElements(Map, int)}), where
	 * elements with lower chances to be generated have priority over
	 * those with a higher chance.
	 *
	 * @param max The maximum size of the generated {@link List}.
	 * Amounts lower or equal to 0 will always result in an empty list.
	 *
	 * @return A {@link List} with {@link #add(Object, float) added}
	 * elements by chance limited to a certain {@code max} size.
	 * May be empty if no element was generated by chance.
	 *
	 * @since JSky 1.0.0
	 */
	@NotNull
	List<T> generate(int max);

	/**
	 * Auxiliary internal method to help with {@link #generate(int)}.
	 * Creates a limited {@link List} of {@code max} elements by a {@link HashMap}
	 * that must store elements (Key) with their chance of being generated (Value),
	 * as the list will only contain the rarest elements if {@code max} is lower than
	 * the size of the {@code elements}.
	 * <p>
	 * Help: You can see this method being used on {@link GenericChanceGenerator#generate(int)}.
	 *
	 * @param elements The {@link Map} of elements to limit in size.
	 * @param max The max size of the {@link List} that will be returned.
	 *
	 * @return If the size of {@code elements} is <b>smaller</b> than {@code max}, then
	 * the keys of {@code elements} are returned as a list. If not, then only the rarest
	 * elements of the {@code elements} map are added to the list, limited to an amount
	 * of {@code max}.
	 *
	 * @since JSky 1.0.0
	 */
	@NotNull
	default List<T> limitElements(@NotNull Map<T, Float> elements, int max) {
		if (max >= elements.size())
			return new ArrayList<>(elements.keySet());
		final List<T> result = new ArrayList<>(max);
		for (int i = 0; i < max; i++) {
			final Set<Entry<T, Float>> entries = elements.entrySet();
			if (entries.isEmpty())
				break;
			Entry<T, Float> lowest = null;
			for (Entry<T, Float> entry : entries)
				if (lowest == null || entry.getValue() < lowest.getValue())
					lowest = entry;
			elements.remove(lowest.getKey());
			result.add(lowest.getKey());
		}
		return result;
	}
}


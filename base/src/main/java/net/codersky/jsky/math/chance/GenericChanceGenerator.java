package net.codersky.jsky.math.chance;

import net.codersky.jsky.math.JNumbers;
import org.jetbrains.annotations.NotNull;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map.Entry;
import java.util.Objects;

/**
 * A very basic {@link ChanceGenerator} for generic element types.
 * 
 * @author xDec0de_
 *
 * @param <T> The type of elements to generate
 * 
 * @since JSky 1.0.0
 */
public class GenericChanceGenerator<T> implements ChanceGenerator<T> {

	private final HashMap<T, Float> map = new HashMap<>();

	@Override
	public @NotNull GenericChanceGenerator<T> add(@NotNull T element, float chance) {
		if (chance > 0)
			map.put(Objects.requireNonNull(element), chance);
		return this;
	}

	@NotNull
	@Override
	public List<T> generate() {
		final List<T> result = new ArrayList<>(map.size());
		for (Entry<T, Float> entry : map.entrySet())
			if (JNumbers.tryChance(entry.getValue()))
				result.add(entry.getKey());
		return result;
	}

	/**
	 * Works in a similar way to {@link #generate()} but limits the
	 * generated elements to a {@code max} amount. Keep in mind that the
	 * rarest elements take priority, so for example if we have two elements,
	 * "Common" (100% chance) and "Rare" (25% chance) and the {@code max} amount
	 * to generate is 1, if the 25% chance of getting the "Rare" element was
	 * successful, the list will only contain "Rare" as it has a higher priority
	 * to be generated than "Common".
	 * 
	 * @param max the maximum size of the generated {@link List}.
	 * 
	 * @return A {@link List} with {@link #add(Object, float) added}
	 * elements by chance limited to a certain {@code max} size.
	 * May be empty if no element was generated by chance.
	 * 
	 * @since SkyUtils 1.0.0
	 */
	@NotNull
	@Override
	public List<T> generate(int max) {
		final HashMap<T, Float> results = new HashMap<>(map.size());
		for (Entry<T, Float> entry : map.entrySet())
			if (JNumbers.tryChance(entry.getValue()))
				results.put(entry.getKey(), entry.getValue());
		return limitElements(results, max);
	}
}